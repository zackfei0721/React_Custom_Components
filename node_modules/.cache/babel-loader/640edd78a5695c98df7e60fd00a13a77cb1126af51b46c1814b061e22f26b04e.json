{"ast":null,"code":"var _jsxFileName = \"E:\\\\Job\\\\Assignments\\\\component-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { PureComponent } from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\n\n// Defining a custom React.memo()\n// Returns a version of the given Component that memorizes its result.\n// If the props to the Component haven't changed since the last render, \n// the memorized result will be returned.\n// Otherwise, a new result is computed and returned.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction customMemo(Component) {\n  let lastProps = null;\n  let lastResult = null;\n  return function (props) {\n    //if latest props are passed then return the latest props\n    if (lastProps && shallowEqual(lastProps, props)) {\n      return lastResult;\n    }\n    lastProps = props;\n    lastResult = /*#__PURE__*/_jsxDEV(Component, {\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 18\n    }, this);\n    return lastResult;\n  };\n}\n\n// Defining a custom PureComponent class\n// PureComponent is a component that only re-renders when its props have changed.\n// This custom implementation uses the shallowEqual function to check if \n// the props have changed.\nclass CustomPureComponent extends React.Component {\n  shouldComponentUpdate(nextProps) {\n    return !shallowEqual(this.props, nextProps);\n  }\n}\n\n// Defining a custom Shallow Compare function\n// to check if the two compared objects are shallowly equal\n// Two objects are considered shallowly equal \n// if they have the same set of keys and each key has the same value in both objects.\nfunction shallowEqual() {\n  let obj1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let obj2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const keys1 = Object.keys(obj1);\n  const keys2 = Object.keys(obj2);\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n  for (let key of keys1) {\n    if (obj1[key] !== obj2[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Creating a regular component with a changable counter\nconst MyComponent = _ref => {\n  let {\n    text,\n    counter\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: [text, \": \", counter]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 42\n  }, this);\n};\n// Creating a custom memoized component using custom memo()\n_c = MyComponent;\nconst MemoizedComponent = customMemo(MyComponent);\n// Creating a component that extends from CustomPureComponent with a changable counter,\n// it should only re-render when its props change.\n_c2 = MemoizedComponent;\nclass CustomPureCom extends CustomPureComponent {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [this.props.text, \": \", this.props.counter]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 12\n    }, this);\n  }\n}\nfunction App() {\n  _s();\n  const [counter, setCounter] = React.useState(0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCounter(counter + 1),\n      children: \"+1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MyComponent, {\n      text: \"This is a regular component, counter\",\n      counter: counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MemoizedComponent, {\n      text: \"This is a memo component\",\n      counter: counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CustomPureCom, {\n      text: \"This is a custom PureComponent, counter\",\n      counter: counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"mgO7WMHyhiBnLtH7uw/qAj2Cy9A=\");\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"MyComponent\");\n$RefreshReg$(_c2, \"MemoizedComponent\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","PureComponent","ReactDOM","jsxDEV","_jsxDEV","customMemo","Component","lastProps","lastResult","props","shallowEqual","fileName","_jsxFileName","lineNumber","columnNumber","CustomPureComponent","shouldComponentUpdate","nextProps","obj1","arguments","length","undefined","obj2","keys1","Object","keys","keys2","key","MyComponent","_ref","text","counter","children","_c","MemoizedComponent","_c2","CustomPureCom","render","App","_s","setCounter","useState","onClick","_c3","$RefreshReg$"],"sources":["E:/Job/Assignments/component-app/src/App.js"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\n\n// Defining a custom React.memo()\n// Returns a version of the given Component that memorizes its result.\n// If the props to the Component haven't changed since the last render, \n// the memorized result will be returned.\n// Otherwise, a new result is computed and returned.\nfunction customMemo(Component) {\n  let lastProps = null;\n  let lastResult = null;\n\n  return function(props) {\n    //if latest props are passed then return the latest props\n    if(lastProps && shallowEqual(lastProps, props)) {\n      return lastResult;\n    }\n\n    lastProps = props;\n    lastResult = <Component {...props} />;\n    return lastResult;\n  };\n}\n\n// Defining a custom PureComponent class\n// PureComponent is a component that only re-renders when its props have changed.\n// This custom implementation uses the shallowEqual function to check if \n// the props have changed.\nclass CustomPureComponent extends React.Component {\n  shouldComponentUpdate(nextProps){\n    return !shallowEqual(this.props, nextProps);\n  }\n}\n\n// Defining a custom Shallow Compare function\n// to check if the two compared objects are shallowly equal\n// Two objects are considered shallowly equal \n// if they have the same set of keys and each key has the same value in both objects.\nfunction shallowEqual(obj1 = {}, obj2 = {}) {\n  const keys1 = Object.keys(obj1);\n  const keys2 = Object.keys(obj2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (let key of keys1){\n    if (obj1[key] !== obj2[key]) {\n      return false;\n    }\n  }\n  return true;  \n}   \n\n// Creating a regular component with a changable counter\nconst MyComponent = ({text, counter}) => <h1>{text}: {counter}</h1>\n// Creating a custom memoized component using custom memo()\nconst MemoizedComponent = customMemo(MyComponent);\n// Creating a component that extends from CustomPureComponent with a changable counter,\n// it should only re-render when its props change.\nclass CustomPureCom extends CustomPureComponent {\n  render() {\n    return <h1>{this.props.text}: {this.props.counter}</h1>;\n  }\n}\n\nfunction App() {\n  const [counter, setCounter] = React.useState(0);\n\n  return (\n    <div>\n      <button onClick={() => setCounter(counter + 1)}>+1</button>\n      <MyComponent text=\"This is a regular component, counter\" counter={counter} />\n      <MemoizedComponent text=\"This is a memo component\" counter={counter} />\n      <CustomPureCom text=\"This is a custom PureComponent, counter\" counter={counter} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}